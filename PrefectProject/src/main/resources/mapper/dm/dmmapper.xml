<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.pcwk.ehr.dm">
<!-- Dao: query찾는 분류 기준 
namespace+id -> com.pcwk.ehr.user.doSelectOne
--> 
<insert id="doSend" parameterType="DmVO" >
    <choose>
        <when test="room !=0">
            INSERT INTO DM (
        seq,
        room,
        sender,
        receiver,
        contents,
        send_dt,
        read_Dt,
        read_chk
    ) VALUES (
        #{seq},
        1,
        #{sender},
        #{receiver},
        #{contents},
        SYSDATE,
        SYSDATE,
        #{readChk}
    )
        </when>
        <otherwise>
             INSERT INTO DM (
        seq,
        room,
        sender,
        receiver,
        contents,
        send_dt,
        read_Dt,
        read_chk
    ) VALUES (
        #{seq},
        0,
        #{sender},
        #{receiver},
        #{contents},
        SYSDATE,
        SYSDATE,
        #{readChk}
    )
        </otherwise>
    </choose>
</insert>
  <update id="updateReadChk" parameterType="DmVO">
    UPDATE dm
    SET read_chk = 0
    WHERE read_chk = 1
      
      AND (
        <choose>
            <when test="room != 0">
                room = #{room} AND receiver = #{receiver} 
            </when>
            
        </choose>
      )
  </update>
  <select id="recentMessage" parameterType="DmVO" resultType="DmVO">
 <![CDATA[
    SELECT seq,
           room,
           sender,
           receiver,
           contents,
           TO_CHAR(send_dt, 'YYYY-MM-DD HH24:MI') AS sendDt,
           TO_CHAR(read_dt, 'YYYY-MM-DD HH24:MI') AS readDt,
           read_chk
    FROM dm
    WHERE (seq, room) IN (SELECT MAX(seq), room FROM dm GROUP BY room)
      AND (sender = #{sender} OR reciever = #{receiver})
    ORDER BY seq DESC
    ]]>
</select>
<select id="contentsList" parameterType="DmVO" resultType="DmVO">
    <![CDATA[
       SELECT m.seq
            , m.room
            , sender
            , receiver
            , sender.name as senderName
            , receiver.name as receiverName
            , m.contents
            , TO_CHAR(m.send_dt, 'YYYY-MM-DD HH24:MI') AS sendDT
            , TO_CHAR(m.read_dt, 'YYYY-MM-DD HH24:MI') AS sendDT
            , m.read_chk AS readChk
         FROM dm m
   LEFT OUTER JOIN users sender 
           ON m.sender = sender.email
   LEFT OUTER JOIN users receiver 
           ON m.receiver = receiver.email
   WHERE (m.sender = #{sender} AND m.receiver = #{receiver})
   OR    (m.sender = #{receiver} AND m.receiver = #{sender})      
     ORDER BY seq
        ]]>  
    
</select>
<!-- 내가 보낸 receiver들은 receiverName으로,나에게 보낸 sender들은 senderName으로 두 그룹을 유니온으로 묶고 중복제거 -->
<select id="receiverList" parameterType="DmVO" resultType="DmVO">
    <![CDATA[
       SELECT DISTINCT
              EMAIL AS RECEIVER
            , NAME AS RECEIVERNAME
            , READ_CHK AS READ_CHK
         FROM ( SELECT U.EMAIL AS EMAIL
                     , U.NAME AS NAME
                     , SUM(M.READ_CHK) AS READ_CHK
                     , MAX(M.SEQ) AS SEQ
                  FROM DM M
             LEFT JOIN USERS U
                    ON M.RECEIVER = U.EMAIL
                 WHERE M.SENDER = #{sender}
              GROUP BY U.EMAIL, U.NAME
                 UNION
                SELECT U.EMAIL AS EMAIL
                     , U.NAME AS NAME
                     , SUM(M.READ_CHK) AS READ_CHK
                     , MAX(M.SEQ) AS SEQ
                  FROM DM M
              LEFT JOIN users U
                     ON M.SENDER = U.email
                  WHERE M.RECEIVER = #{sender}
               GROUP BY U.EMAIL, U.NAME
              )
        ]]>  
    
</select>
<delete id="doDelete" parameterType="DmVO">
        DELETE FROM dm
        WHERE seq = #{seq}  
  </delete>
 <select id="getDmSeq" resultType="int">
     SELECT DM_SEQ.NEXTVAL FROM DUAL
  </select>         
</mapper>